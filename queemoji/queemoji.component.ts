import { Component, OnInit } from '@angular/core';
import { CatsService } from 'src/app/services/cats.service';
import { JuegosService } from 'src/app/services/juegos.service';

@Component({
  selector: 'app-queemoji',
  templateUrl: './queemoji.component.html',
  styleUrls: ['./queemoji.component.css']
})
export class QueemojiComponent implements OnInit {
  name = '¬øCu√°l fue el emoji? üëë';
  scoreGame = '';
  showBtnStart = true;
  countDownEmoji: number;
  emojiArray = ['üöó','‚Äãüöì‚Äã', 'üåå', 'üìª', 'üëª', 'üç¶', 'üëΩ', 'üëØ', 'üêπ‚Äã',
  '‚Äã‚òÉÔ∏è‚Äã','‚Äã‚õÑ‚Äã','‚Äã‚Äãüê∫‚Äã',‚Äã‚Äã'üòº',‚Äã‚Äã‚Äã'üèäüèæ‚Äç‚ôÇÔ∏è','‚Äãüèäüèº','‚ÄãüõÄüèª‚Äã','üõÄüèΩ‚Äã','ü§πüèø‚Äç‚ôÇÔ∏è','‚Äãü§πüèº‚Äç‚ôÇÔ∏è','‚ÄãüèÉüèª','‚ÄãüèÉüèΩ‚Äç‚ôÇÔ∏è',
  '‚Äãüßëüèæ‚Äç‚úàÔ∏è','‚Äãüßëüèø‚Äç‚úàÔ∏è','‚Äãüßëüèª‚Äç‚úàÔ∏è','‚Äãüßëüèª‚ÄçüöÄ','‚ÄãüßëüèΩ‚Äçüíª','‚Äãüßëüèæ‚Äçüíª','‚Äãüßëüèø‚Äçüè≠',
  '‚ÄãüßëüèΩ‚Äçüè≠','‚Äãüßëüèø‚Äçüç≥','‚Äãüßëüèæ‚Äçüåæ','‚Äãüßëüèæ‚Äç‚öñÔ∏è','‚Äãüßëüèø‚Äç‚öñÔ∏è','‚Äãüßëüèæ‚Äç‚öïÔ∏è','‚ÄãüßëüèΩ‚Äç‚öïÔ∏è‚Äã','üßëüèø‚Äçü¶≤','‚Äãüßëüèæ‚Äçü¶≥'‚Äã‚Äã];
  emojiIndex: number;
  maxNumberEmoji = this.emojiArray.length - 1;
  countDownEmojiSize = 2;
  emojiAskIndex: number;
  youWin = false;
  catURL = '';
  intervalGame: any;
  timerGame = 0;
  contador=0;

  constructor(private catsService: CatsService,private miJuegoService:JuegosService) { }

  startGame() {
    this.showBtnStart = false;
    this.startTimer();
    this.randomEmoji();
  }
  newStartGame() {
    this.showBtnStart = true;
    this.youWin = false;
    this.startTimer();
    this.randomEmoji();

  }

  startTimer() {
    let timeInSeconds = 0;
    this.intervalGame = setInterval(() => this.timerGame = timeInSeconds++,800)
  }

  randomEmoji() {
    this.emojiIndex = Math.round(Math.random() * this.maxNumberEmoji);
    this.startcountDownFirstEmoji();
  }

  startcountDownFirstEmoji() {
    const intervalEmoji = setInterval(() => this.intervalEmojiControl(intervalEmoji),800);
  }

  intervalEmojiControl(intervalEmoji) {
    this.countDownEmoji = this.countDownEmojiSize--;

    // Cuando termine el numero de segundos para recordar la imagen, se debe parar el setInterval
    if (this.countDownEmoji < 0) {
      clearInterval(intervalEmoji);
      this.thisIsYourEmoji();
    }
  }

  compareAnswer(answer) {
    switch (answer) {
      case 'SI':
        if (this.emojiIndex === this.emojiAskIndex) {
          this.scoreGame = this.scoreGame + '‚úÖ';
          this.contador++;
          this.finishGame();
        } else {
          this.scoreGame = this.scoreGame + '‚ùå';
        }
        break;
      case 'NO':
        if (this.emojiIndex !== this.emojiAskIndex) {
          this.scoreGame = this.scoreGame + '‚úÖ';
          this.thisIsYourEmoji();
        } else {
          this.scoreGame = this.scoreGame + '‚ùå';
        }
        break;
    }

  }

  thisIsYourEmoji() {
    this.emojiAskIndex = Math.round(Math.random() * this.maxNumberEmoji);
  }

  finishGame() {
  // Cuando el juego finalice, se debe parar el setInterval del contador de tiempo del juego
    clearInterval(this.intervalGame);
    this.youWin = true;
    let usuario = localStorage.getItem('usuarioActual');
    this.miJuegoService.guardaPartida(this.contador,usuario,'emoji');

    this.getCatImage();
    this.newStartGame();
  }

  getCatImage(): void {
    this.catsService
      .getImage()
      .subscribe(
        {
          next: resultQuestion => {
            console.log(resultQuestion);
        },
        error: err => {
          console.log('Ups! Ocurri√≥ error: ', err.error);
        }
      });
  }

  ngOnInit(): void {
  }

}
